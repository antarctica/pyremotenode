#!/usr/bin/env python3

import argparse
import logging
import os
import traceback

from pyremotenode.schedule import Scheduler
from pyremotenode.utils import Configuration, setup_logging
from pyremotenode.utils.system import background_fork

if __name__ == '__main__':
    a = argparse.ArgumentParser()
    a.add_argument("config", help="Configuration to use for running remote node",
                   type=Configuration.check_file)
    # TODO: Naming of service as a parameter...
    a.add_argument("--start-when-fail", "-s", help="Start even if initial monitor checks fail",
                   action="store_true", default=False)
    a.add_argument("--pidfile", "-p", help="PID file to manage for service operations",
                   default=os.path.join(os.sep, "var", "run", "{0}.pid".format(__name__)))
    a.add_argument("--no-pidfile", "-np", help="Don't check or create PID file",
                   default=False, action="store_true")
    a.add_argument("--no-daemon", "-n", help="Do not daemon", default=False, action="store_true")
    args = a.parse_args()

    if not args.no_daemon:
        background_fork()

    cfg = Configuration(args.config).config

    setup_logging("pyrm-{}".format(args.config),
                  level=getattr(logging, cfg['general']['log_level']),
                  syslog=True)

    try:
        pidfile = args.pidfile if not args.no_pidfile else None
        m = Scheduler(cfg,
                      start_when_fail=args.start_when_fail,
                      pid_file=pidfile)
        m.run()
    except Exception:
        # Last opportunity to log errors
        logging.error(traceback.format_exc())
